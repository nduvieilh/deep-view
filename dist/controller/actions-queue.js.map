{"version":3,"sources":["../../src/controller/actions-queue.js"],"names":["puppeteer","require","MAX_INSTANCES","states","run","extractInfo","loadBalance","instances","queue","Promise","resolve","reject","runJob","instance","queueEntry","queueEntries","next","value","cleanUp","job","key","then","result","results","set","e","entries","Map","allJobs","Array","push","all","topic","page","data","selector","searchUrl","goto","$$","elementArray","element","$eval","node","innerText","text","console","log","catch","error","launch","headless","browser","state","i","Instance","close","newPage"],"mappings":"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","sourcesContent":["const puppeteer = require('puppeteer');\r\nconst MAX_INSTANCES = 5;\r\n\r\nconst states = [\r\n    'Alabama',\r\n    'Alaska',\r\n    'Arizona',\r\n    'Arkansas',\r\n    'California',\r\n    'Colorado',\r\n    'Connecticut',\r\n    'Delaware',\r\n    'Florida',\r\n    'Georgia',\r\n    'Hawaii',\r\n    'Idaho',\r\n    'Illinois',\r\n    'Indiana',\r\n    'Iowa',\r\n    'Kansas',\r\n    // 'Kentucky',\r\n    // 'Louisiana',\r\n    // 'Maine',\r\n    // 'Maryland',\r\n    // 'Massachusetts',\r\n    // 'Michigan',\r\n    // 'Minnesota',\r\n    // 'Mississippi',\r\n    // 'Missouri',\r\n    // 'Montana',\r\n    // 'Nebraska',\r\n    // 'Nevada',\r\n    // 'New Hampshire',\r\n    // 'New Jersey',\r\n    // 'New Mexico',\r\n    // 'New York',\r\n    // 'North Carolina',\r\n    // 'North Dakota',\r\n    // 'Ohio',\r\n    // 'Oklahoma',\r\n    // 'Oregon',\r\n    // 'Pennsylvania',\r\n    // 'Rhode Island',\r\n    // 'South Carolina',\r\n    // 'South Dakota',\r\n    // 'Tennessee',\r\n    // 'Texas',\r\n    // 'Utah',\r\n    // 'Vermont',\r\n    // 'Virginia',\r\n    // 'Washington',\r\n    // 'West Virginia',\r\n    // 'Wisconsin',\r\n    // 'Wyoming',\r\n];\r\n\r\nasync function run() {\r\n    const browser = await puppeteer.launch({headless:false});\r\n    let queue = new Map();\r\n    let instances = new Array();\r\n\r\n    console.log(browser);\r\n\r\n    for(let state of states) {\r\n        queue.set(state, extractInfo);\r\n    }\r\n\r\n    for(var i = 0; i < MAX_INSTANCES; i++) {\r\n        instances.push(new Instance(browser));\r\n    }\r\n\r\n    await loadBalance(instances, queue).then(function(data) {\r\n        console.log(data);\r\n    }).catch(console.log);\r\n\r\n    await browser.close();\r\n\r\n    async function extractInfo(topic, page) {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                page.then(async page => {\r\n                    let data = new Map();\r\n                    const selector = `table.infobox>tbody>tr`;\r\n                    const searchUrl = `https://www.wikipedia.org/wiki/${topic}`;\r\n                    await page.goto(searchUrl);\r\n                    // await page.screenshot({\r\n                    //     path: `screenshots/${topic}.png`\r\n                    // });\r\n\r\n                    await page.$$(selector).then(elementArray => {\r\n                        for(let element of elementArray) {\r\n                            element.$eval('td', node => {\r\n                                return node.innerText\r\n                            }).then(text => {\r\n                                console.log(text);\r\n                            }).catch((e) => {});\r\n                        }\r\n                    }).catch(console.error);\r\n\r\n                    resolve(data);\r\n                });\r\n            } catch(e) { reject(e) };\r\n        });\r\n    }\r\n\r\n    async function loadBalance(instances, queue) {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                let queueEntries = queue.entries();\r\n                let results = new Map();\r\n                let allJobs = new Array();\r\n\r\n                for(let instance of instances) {\r\n                    allJobs.push(runJob(instance));\r\n                }\r\n\r\n                Promise.all(allJobs).then(function() {\r\n                    resolve(results);  \r\n                });\r\n                \r\n                async function runJob(instance) {\r\n                    return new Promise(async (resolve, reject) => {\r\n                        try {\r\n                            let queueEntry = queueEntries.next().value;\r\n                            if (typeof queueEntry === 'undefined') {\r\n                                resolve(instance.cleanUp());\r\n                            }\r\n                            let job = queueEntry[1];\r\n                            let key = queueEntry[0];\r\n\r\n                            instance.run(job, key).then(function (result) {\r\n                                results.set(key, result);\r\n\r\n                                runJob(instance).then(function() {\r\n                                    resolve();\r\n                                });\r\n                            });\r\n                        } catch (e) { reject(e) };\r\n                    });\r\n                }\r\n            } catch (e) { reject(e) };\r\n        });\r\n    }\r\n}\r\n\r\nclass Instance {\r\n    constructor(browser) {\r\n        this.page = browser.newPage();\r\n    }\r\n\r\n    run(job, value) {\r\n        return job(value, this.page);\r\n    }\r\n\r\n    cleanUp() {\r\n        this.page.then(page => {\r\n            page.close().catch(console.error);\r\n        }).catch(console.error);\r\n    }\r\n}\r\n\r\nrun();"],"file":"actions-queue.js"}